{
  "_args": [
    [
      {
        "raw": "cputilization@*",
        "scope": null,
        "escapedName": "cputilization",
        "name": "cputilization",
        "rawSpec": "*",
        "spec": "*",
        "type": "range"
      },
      "C:\\xampp\\htdocs\\npmtest"
    ]
  ],
  "_from": "cputilization@*",
  "_id": "cputilization@1.0.0",
  "_inCache": true,
  "_location": "/cputilization",
  "_nodeVersion": "0.10.32",
  "_npmUser": {
    "name": "zaphod1984",
    "email": "zaphod84@gmx.de"
  },
  "_npmVersion": "2.0.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cputilization@*",
    "scope": null,
    "escapedName": "cputilization",
    "name": "cputilization",
    "rawSpec": "*",
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cputilization/-/cputilization-1.0.0.tgz",
  "_shasum": "39d56a79c98bfdcfba015318135aed779f570b43",
  "_shrinkwrap": null,
  "_spec": "cputilization@*",
  "_where": "C:\\xampp\\htdocs\\npmtest",
  "author": {
    "name": "Manuel Ernst",
    "email": "zaphod84@gmx.de"
  },
  "bugs": {
    "url": "https://github.com/zaphod1984/cputilization/issues"
  },
  "dependencies": {
    "ptic": "^0.3.1"
  },
  "description": "sample your cpu utlization continously",
  "devDependencies": {
    "chai": "^1.9.1",
    "mocha": "^1.21.4",
    "sandboxed-module": "^1.0.1",
    "sinon": "^1.10.3"
  },
  "directories": {
    "example": "example",
    "lib": "lib"
  },
  "dist": {
    "shasum": "39d56a79c98bfdcfba015318135aed779f570b43",
    "tarball": "https://registry.npmjs.org/cputilization/-/cputilization-1.0.0.tgz"
  },
  "gitHead": "1e58c13749f8aa466ab60b067c0cd9cd2defd671",
  "homepage": "https://github.com/zaphod1984/cputilization#readme",
  "keywords": [
    "cpu utilization"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "zaphod1984",
      "email": "zaphod84@gmx.de"
    }
  ],
  "name": "cputilization",
  "optionalDependencies": {},
  "readme": "# CPUtilization\r\n\r\n[![Build Status](https://travis-ci.org/zaphod1984/cputilization.png)](https://travis-ci.org/zaphod1984/cputilization)\r\n\r\n[![NPM](https://nodei.co/npm/cputilization.png)](https://nodei.co/npm/cputilization/)\r\n\r\n[![NPM](https://nodei.co/npm-dl/cputilization.png?months=3)](https://nodei.co/npm/cputilization/)\r\n\r\n## Installation\r\n\r\n```\r\nnpm install cputilization\r\n```\r\n\r\n## Invocation\r\n\r\nThis modules sample the cpu utilization.\r\nThe interface works via callback or event emitter.\r\n\r\n### callback interface\r\nuse the callback interface if the cpu usage should be sampled only once:\r\n\r\n````javascript\r\nvar cpuu = require('cputilization');\r\n\r\ncpuu(function(error, sample) {\r\n    //returns after 1000ms with the cpu usage of that time interval\r\n    console.log( sample.percentageBusy() );\r\n});\r\n````\r\n\r\nsupply an options hash to specify the time interval:\r\n````javascript\r\nvar cpuu = require('cputilization');\r\n\r\ncpuu({timeout: 2000}, function(error, sample) {\r\n    //returns after 2000ms\r\n    console.log( sample.percentageBusy() );\r\n});\r\n````\r\n\r\n### event emitter interface\r\nif no callback is supplied the cpu utilization will be sampled continously.\r\n\r\na event emitter is returned than, emits a `sample` event every 1000ms\r\n\r\n````javascript\r\nvar cpuu = require('cputilization');\r\n\r\nvar sampler = cpuu();\r\n\r\nsampler.on('sample', function(sample) {\r\n    console.log( sample.percentageBusy() );\r\n});\r\n````\r\n\r\nan additional options hash can be provided:\r\n\r\n- `interval`: the ticking interval, default: 1000ms\r\n- `autoStart`: automatically start the ticker, default: true\r\n\r\n````javascript\r\nvar cpuu = require('cputilization');\r\n\r\nvar sampler = cpuu({interval:100, autoStart: false});\r\n\r\nsampler.on('sample', function(sample) {\r\n    console.log( sample.percentageBusy() );\r\n});\r\n````\r\n\r\n#### start sampling\r\n\r\nif the sampler does not start automatically it can be started via the `start` command:\r\n\r\n````javascript\r\nvar cpuu = require('cputilization');\r\n\r\nvar sampler = cpuu({autoStart: false, interval:100});\r\n\r\nsampler.on('sample', function(sample) {\r\n    //gets executed every 100ms\r\n    console.log( sample.percentageBusy() );\r\n});\r\n\r\nsampler.start();\r\n````\r\n\r\n\r\n#### stop sampling\r\nthe returned event emitter features a `stop` method, use that one to stop sampling:\r\n\r\n````javascript\r\nvar cpuu = require('cputilization');\r\n\r\nvar sampler = cpuu({interval:100});\r\n\r\nsampler.on('sample', function(sample) {\r\n    //gets executed every 100ms\r\n    console.log(sample.percentageBusy());\r\n});\r\n\r\nsampler.stop();\r\n````\r\n\r\n## CpuSample\r\n\r\nAn `CpuSample` object is emitted (EventEmitter interface) or returned via tha callback interface.  \r\nThe following methods are available:\r\n\r\n### percentageBusy()\r\n\r\nReturns the average CpuUtilization over the specified sampling interval.\r\n\r\n### percentageIdle()\r\n\r\nReturns the average Cpu Idle percentage of the specified sampling interval.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/zaphod1984/cputilization.git"
  },
  "scripts": {
    "test": "mocha tests"
  },
  "version": "1.0.0"
}
